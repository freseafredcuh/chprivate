wl = true
constants = string.split("https://pastebin.com/raw/c2Vu80fC|Team_Data|Melee_Handler|https://pastebin.com/raw/4JuheYmH|Fire_BulletX|function|Airdrop_Watch|table|Tactical Rifle|Medium Ammo|Assault|weaponData|FireRate|GetState", "|")

--// Vars
if not game:IsLoaded() then
    game.Loaded:Wait()
end
getgenv().visiblePlayers = {}
getgenv().chamsConnections = {}
getgenv().wepMods = false
local Options = getgenv().Options
saKey = Options["silentAimToggleKey"] or Enum.KeyCode.X
Ydown = Options["Ydown"] or 73
if Ydown == 37 then Ydown = 73 end
Fov = Options["Fov"] or 100
EspTransparency = Options["EspTransparency"] or 0.7
chams = Options["chams"] or false
chamsConnections = getgenv().chamsConnections
silentAim = Options["silentAim"] or false
aimlock = Options["aimlock"] or false
antiAim = Options["antiAim"] or false
pickaxeAura = Options["pickaxeAura"] or false
tpExploit = Options["tpExploit"] or false
jumpEnabled = Options["jumpEnabled"] or false
jump = Options["jump"] or 58
walkEnabled = Options["walkEnabled"] or false
walk = Options["walk"] or 25
tpPlayer = Options["tpPlayer"] or ""
nameEnabled = Options["nameEnabled"] or false
targetPart = Options["targetPart"] or "Head"
hitChance = Options["hitChance"] or 100
smoothness = Options["smoothness"] or 1
espBoxes = Options["boxEsp"] or true
visibleCheck = Options["visibleCheck"] or false
aimlockKeybind = Options["aimlockKeybind"] or "MouseButton2"
autopot = Options["autopot"] or false
autochat = Options["autochat"] or false
autowall = Options["autowall"] or false
Hchance = Options["headHitChance"] or 0
Uchance = Options["uppertorsoHitChance"] or 0
Lchance = Options["lowertorsoHitChance"] or 0
noFall = Options["nofall"] or false
espTracers = Options["espTracers"] or false
espNames = Options["espNames"] or true
espLock = Options["espLock"] or false

if Options["mkeybind"] then
    mkeybind = Enum.KeyCode[Options["mkeybind"]]
else
    mkeybind = Enum.KeyCode.RightShift
end
local noclipLoop
--//

getgenv().targetPlayer = nil

local espLib = loadstring(game:HttpGet("https://pastebin.com/raw/bhmauHcN"))()
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local localPlayer = players.LocalPlayer
local tracking = {}
local teamCheck = false
local UserInputService = game:GetService("UserInputService")
local MB = UserInputService:GetMouseButtonsPressed()
local remove = table.remove
local fromRGB = Color3.fromRGB
local espColor = fromRGB(139, 26, 176)
local teamEspColor = fromRGB(61, 176, 26)
local gunName = nil
local gunName
local localPlayer = game:GetService("Players").LocalPlayer
local currentCamera = workspace.CurrentCamera
local mouse = localPlayer:GetMouse()
local RunService = game:GetService("RunService")
local runService = game:GetService("RunService")
local team = {}
local random = Random.new()
local acCheck1 
local headSize = 10
local headTrans = 0.8
local headColor = fromRGB(255, 0, 0)
local silentAimToggle = false
local circlevis = false
local circle = Drawing.new("Circle")
randomNum = random:NextInteger(1, 100)
randomNum2 = random:NextInteger(1, 100)
local function isInTable(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end

local acTick = tick()
for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
    acCheck1 = true
    v:Disable()
end
if not acCheck1 or not constants then
    localPlayer:Kick("Cheater Hub failed to load properly")
    wait(9e9)
end
local functions = {}
for k, b in pairs(getgc()) do
    if type(b) == constants[6] and getfenv(b).script ~= nil then
        table.insert(functions, b)
    end
end
for i, v in pairs(getconnections(game:GetService("LogService").MessageOut)) do
    if isInTable(functions, v.Function) then
        v:Disable()
    end
end
local MemCache = game:GetService("Stats"):GetTotalMemoryUsageMb();
function GenerateFakeMemory()
    local random = math.random(1, 2);
    local method = (random == 1 and "-") or "+";
    return (method == "-" and (MemCache - (random / math.random(100, 200)))) or (MemCache + (random / math.random(100, 200)));
end
local guiTick = tick()
-- // Gui
local circle1 = Drawing.new("Circle")
circle1.Visible = true
circle1.Filled = true
circle1.NumSides = 1000
circle1.Radius = 0 
circle1.Transparency = 0.5
circle1.Color = Color3.fromRGB(61, 176, 26)
circle1.Position = Vector2.new(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y / 2)
local ran = 3
local going = true
connection = runService.RenderStepped:Connect(function()
    if circle1 and going then
    ran = ran + 1
    local radCalc = 1 / ran
    radCalc = radCalc * 150
    circle1.Radius = circle1.Radius + radCalc 
    if ran >= 60 then
        if circle1.Transparency > 0 then
            circle1.Transparency = circle1.Transparency - 0.01
            else
                going = false
                circle1:Remove()
                if connection then
                connection:Disconnect()
                end
        end
    end

    end
end)
if _G.hereiambabyhehe ~= true then
    _G.hereiambabyhehe = true
    elseif _G.hereiambabyhehe == true then
    local removethat = game.CoreGui:FindFirstChild("FluxLib")
    removethat:Destroy()
    removethat:Remove()
end
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
 Name = "Cheater Hub",
   LoadingTitle = "CH ~ Island Royale",
   LoadingSubtitle = "by freseafred",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "Cheater Hub", -- Create a custom folder for your hub/game
      FileName = "Cheater Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "aWDh4u3JJ9", -- The Discord invite code, do not include discord.gg/
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Cheater Hub",
      Subtitle = "Key System",
      Note = "Updates Weakly",
      FileName = "wd3asefsfafeaa",
      SaveKey = true,
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = "CHOnTop1239872lP"
   }
})

local Section1 = Window:CreateTab("Main", 6023426915) -- Title, Image
local Section2 = Window:CreateTab("Visual", 6023426915) -- Title, Image
local Section3 = Window:CreateTab("Misc", 6023426915) -- Title, Image


local wearFolder = game:GetService("ReplicatedStorage").Player_Data[localPlayer.Name]
local clothingFolder = game:GetService("ReplicatedStorage").Character_Clothing
local activeItem = function(category)
    local tempcTable = {}
    for i,v in pairs(clothingFolder[category]:GetChildren()) do
        table.insert(tempcTable, v.Name)
    end
    return tempcTable
end
UserInputService.InputBegan:connect(function(input, Processed)
	if not Processed then
		if input.KeyCode == mkeybind then
            _G.toggleUiHere()
		end
	end
end)
_G.PresetColor = fromRGB(139, 26, 176)

local Section = Section1:CreateSection("Aim")
local Toggle = Section1:CreateToggle({
    Name = "Silent Aim",
    CurrentValue = false,
    Flag = "ToggleSilent", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        silentAim = bool
    end,
})
local Toggle = Section1:CreateToggle({
    Name = "Enable Silent Aim Key Toggle",
    CurrentValue = false,
    Flag = "ToggleSilentKT",
    Callback = function(bool)
        silentAimToggle = bool
    end,
})

local Toggle = Section1:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Aimlock",
    Callback = function(bool)
        aimlock = bool
    end,
})

local Toggle = Section3:CreateToggle({
    Name = "Anti-Aim",
    CurrentValue = false,
    Flag = "AntiAim",
    Callback = function(bool)
        antiAim = bool
    end,
})

local Toggle = Section3:CreateToggle({
    Name = "Auto Pickaxe",
    CurrentValue = false,
    Flag = "PickaxeAura",
    Callback = function(bool)
         pickaxeAura = bool
    end,
})

local Toggle = Section3:CreateToggle({
    Name = "Bounce TP",
    CurrentValue = false,
    Flag = "BounceTP",
    Callback = function(bool)
        tpexploit = bool
    end,
})

local Toggle = Section1:CreateToggle({
    Name = "Visibility Check",
    CurrentValue = false,
    Flag = "Visibility Check",
    Callback = function(bool)
        visibleCheck = bool
    end,
})

local Toggle = Section1:CreateToggle({
    Name = "Auto Fire",
    CurrentValue = false,
    Flag = "Autowall",
    Callback = function(bool)
        autowall = bool
    end,
})

local Slider = Section1:CreateSlider({
   Name = "Smoothness",
   Range = {1, 25},
   Increment = 1,
   Suffix = "Smoothness",
   CurrentValue = 1,
   Flag = "Smoothness", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(slidervalue)
   smoothness = slidervalue
   end,
})

local Slider = Section1:CreateSlider({
   Name = "FOV",
   Range = {0, 800},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = 1,
   Flag = "FOV", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(slidervalue)
   Fov = slidervalue
   end,
})

local Slider = Section1:CreateSlider({
    Name = "Hit Chance",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Hit Chance",
    CurrentValue = 1,
    Flag = "Hitchance", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    hitChance = slidervalue
    end,
 })

 local Dropdown = Section1:CreateDropdown({
    Name = "Target Part",
    Options = {"Head","UpperTorso","LowerTorso"},
    CurrentOption = "Head",
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(dropdownvalue)
    targetPart = dropdownvalue
    end,
 })
 
 local Section = Section1:CreateSection("Bone Hit Chance (MUST ADD UP TO 100)")
 local Slider = Section1:CreateSlider({
    Name = "Head Chance",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Head Chance",
    CurrentValue = 1,
    Flag = "HHitchance", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    HChance = slidervalue
    end,
 })

 local Slider = Section1:CreateSlider({
    Name = "Upper Torso Chance",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Upper Torso Chance",
    CurrentValue = 1,
    Flag = "UHitchance", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    UChance = slidervalue
    end,
 })

 local Slider = Section1:CreateSlider({
    Name = "Lower Torso",
    Range = {0, 100},
    Increment = 1,
    Suffix = "LowerTorso Chance",
    CurrentValue = 1,
    Flag = "LHitchance", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    LChance = slidervalue
    end,
 })

 local Keybind = Section1:CreateKeybind({
    Name = "Keybind Example",
    CurrentKeybind = "E",
    HoldToInteract = false,
    Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Keybind)
            local function Input(input, gameProcessedEvent)
                local value = input.KeyCode
                if value ~= Enum.KeyCode.Unknown then
                    aimlockKeybind = value
                    connection:Disconnect()
                end
            end
    
            connection = UserInputService.InputBegan:Connect(Input)
    end,
 })

 local Slider = Section1:CreateSlider({
    Name = "Lower Torso",
    Range = {0, 100},
    Increment = 1,
    Suffix = "LowerTorso Chance",
    CurrentValue = 1,
    Flag = "LHitchance", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    LChance = slidervalue
    end,
 })
 local Section = Section1:CreateSection("Hitbox")

 local Slider = Section1:CreateSlider({
    Name = "Hitbox Size",
    Range = {0, 50},
    Increment = 1,
    Suffix = "Hitbox",
    CurrentValue = 1,
    Flag = "Hitbox", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    headSize = slidervalue
    end,
 })

 local Slider = Section1:CreateSlider({
    Name = "Hitbox Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "Transparency",
    CurrentValue = 1,
    Flag = "Transparency", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
    headTrans = slidervalue
    end,
 })

 local ColorPicker = Section1:CreateColorPicker({
    Name = "Hitbox Colour",
    Color = Color3.fromRGB(255,0,0),
    Flag = "Color", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(color)
        headColor = color
    end
})

local Button = Section1:CreateButton({
    Name = "Hitbox",
    Callback = function()
        if not hitboxRunning then
            hitboxRunning = true
        game:GetService("Players").playerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(character)
                if not isInTable(team, player.Name) then
                local head = character:WaitForChild("HumanoidRootPart")
                if head then
                    head.Size = Vector3.new(headSize,headSize,headSize)
                    head.Transparency = headTrans
                    head.CanCollide = false
                    head.Material = "Plastic"
                    wait()
                    head.Color = headColor
                end
            end
            end)
        end)
        for i,player in pairs(game:GetService("Players"):GetPlayers()) do
            if player ~= localPlayer and not isInTable(team, player.Name) then
                player.CharacterAdded:Connect(function(character)
                    if not isInTable(team, player.Name) then
                    local head = character:WaitForChild("HumanoidRootPart")
                    if head then
                        head.Size = Vector3.new(headSize,headSize,headSize)
                        head.Transparency = headTrans
                        head.CanCollide = false
                        head.Material = "Plastic"
                        wait()
                        head.Color = headColor
                    end
                end
                end)
                if player.Character then
                    if not isInTable(team, player.Name) then
                    local head = player.Character:FindFirstChild("HumanoidRootPart")
                    if head then
                        head.Size = Vector3.new(headSize,headSize,headSize)
                        head.Transparency = headTrans
                        head.CanCollide = false
                        head.Material = "Plastic"
                        wait()
                        head.Color = headColor
                    end
                end
                end
            end
        end
    end
    end,
 })

 local Section = Section2:CreateSection("Visuals")

 local Toggle = Section2:CreateToggle({
    Name = "Box ESP",
    CurrentValue = false,
    Flag = "ESP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        espBoxes = bool
        espLib.Boxes = bool
    end,
 })

 local Toggle = Section2:CreateToggle({
    Name = "Tracers",
    CurrentValue = false,
    Flag = "Tracers", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        espTracers = bool
        espLib.Tracers = bool 
    end,
 })

 local Toggle = Section2:CreateToggle({
    Name = "Names",
    CurrentValue = false,
    Flag = "Names", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        espNames = bool
        espLib.Names = bool 
    end,
 })

 local Toggle = Section2:CreateToggle({
    Name = "Lock ESP",
    CurrentValue = false,
    Flag = "LockESP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        espLock = bool
        espLib.FaceCamera = bool
    end,
 })

 local ColorPicker = Section1:CreateColorPicker({
    Name = "ESP Color",
    Color = Color3.fromRGB(255,0,0),
    Flag = "Color", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(pickedcolor)
        espLib.Color  = color
    end
})

local Toggle = Section2:CreateToggle({
    Name = "Show FOV",
    CurrentValue = false,
    Flag = "Show FOV", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        circlevis = bool
        circle.Visible = bool
    end,
 })

 local Toggle = Section3:CreateToggle({
    Name = "Walk Speed",
    CurrentValue = false,
    Flag = "Walk Speed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        walkEnabled = bool
    end,
 })

 local Toggle = Section3:CreateToggle({
    Name = "Jump Power",
    CurrentValue = false,
    Flag = "Jump Power", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        jumpEnabled = bool
    end,
 })

local Slider = Section3:CreateSlider({
    Name = "WalkSpeed",
    Range = {25, 300},
    Increment = 1,
    Suffix = "WalkSpeed",
    CurrentValue = 25,
    Flag = "Walkspeed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
        walk = slidervalue
    end,
 })

 local Slider = Section3:CreateSlider({
    Name = "JumpPower",
    Range = {25, 300},
    Increment = 1,
    Suffix = "JumpPower",
    CurrentValue = 25,
    Flag = "Jumppower", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(slidervalue)
        jump = slidervalue
    end,
 })

 local Toggle = Section3:CreateToggle({
    Name = "No Fall Damage",
    CurrentValue = false,
    Flag = "No Fall Damage", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if noFall then
            while wait() do
            if not nofall then break end
            pcall(function()
            game.ReplicatedStorage.Remote_Events.Falling_State:FireServer(1)
            end)
            end

        end
    end,
 })

--// Incase nofall isn't enabled manually, it will still be triggered
if noFall then
    while wait() do
    if not nofall then break end
    pcall(function()
    game.ReplicatedStorage.Remote_Events.Falling_State:FireServer(1)
    end)
    end

end

local Toggle = Section3:CreateToggle({
    Name = "Auto Use Heals",
    CurrentValue = false,
    Flag = "AutoUseHeals", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        autopot = bool
    end,
 })

 local Toggle = Section3:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "NoClip", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        noclipLoop = bool
    end,
 })

 local Toggle = Section3:CreateToggle({
    Name = "Inf Jump",
    CurrentValue = false,
    Flag = "InfJump", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            local function Action(Object, Function) if Object ~= nil then Function(Object); end end
            UISconnection = UserInputService.InputBegan:Connect(function(UserInput)
                if bool then
                if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
                    if localPlayer.Character then
                    Action(localPlayer.Character.Humanoid, function(self)
                        if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                            Action(self.Parent.HumanoidRootPart, function(self)
                                self.Velocity = Vector3.new(self.Velocity.X, jump, self.Velocity.Z);
                            end)
                        end
                    end)
                end
                end
            end
            end)
        else
            UISconnection:Disconnect()
        end
    end,
 })

local messageTable = {
    "CH Is OP",
    "Cheater Hub On TOP",
    "Time for the takeover",
    "noob",
    "L gamer",
    "Jurd's Child is a qt",
    "U shud defo buy cheater hub",
    ".gg/UNOTINVITED LOL",
}

local Toggle = Section3:CreateToggle({
    Name = "Flex Cheater Hub!",
    CurrentValue = false,
    Flag = "Flex", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        autochat = bool
        local Target = game:GetService("ReplicatedStorage")["Remote_Events"]["Request_Chat"];
        coroutine.wrap(function()
            while wait(3) do
                if not autochat then break end
                local indexx = random:NextInteger(1, #messageTable)
                Target:FireServer(messageTable[indexx])
                
            end
            end)()
    end,
 })

coroutine.wrap(function()
    while wait(3) do
        if not autochat then break end
        local indexx = random:NextInteger(1, #messageTable)
        Target:FireServer(messageTable[indexx])
        
    end
    end)()

local funcTick = tick()
-- // Team List
coroutine.wrap(
    function()
        while true do
            local teamStorage = game:GetService("ReplicatedStorage"):FindFirstChild(constants[2])
            if teamStorage then
                team = {}
                for i, teamFolder in pairs(teamStorage:GetChildren()) do
                    for p, playerValue in pairs(teamFolder:GetChildren()) do
                        if tostring(playerValue.Name) == tostring(localPlayer.Name) then
                            for o, teamValue in pairs(teamFolder:GetChildren()) do
                                table.insert(team, tostring(teamValue.Name))
                            end
                        end
                    end
                end
            end
            wait(3)
        end
    end
)()

wait(0.1)
coroutine.wrap(
    function()
        while wait(0.5) do
            
            if pickaxeAura then
                for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if
                        v ~= localPlayer  and localPlayer.Character and
                            localPlayer.Character:FindFirstChildOfClass("Tool") and
                            localPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild(constants[3]) and 
                            localPlayer.Character:FindFirstChild("HumanoidRootPart") and
                            v.Character and
                            v.Character:FindFirstChild("HumanoidRootPart") and
                            v.Character:FindFirstChild("Head")
                     then
                        if team == nil or #team == 0 or isInTable(team, v.Name) == false then
                        if
                            (localPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude <=
                                16
                         then
                            local pos = currentCamera:WorldToScreenPoint(v.Character.Head.Position)
                            local screenRay = currentCamera:ScreenPointToRay(pos.X, pos.Y, 0.1)
                            local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 16)

                            game:GetService("ReplicatedStorage").Remote_Events.Melee_Attack:FireServer(
                                v,
                                localPlayer.Character:FindFirstChildOfClass("Tool"),
                                playerRay
                            )
                        end
                    end
                    end
                end
            end
        end
    end
)()
local function getClosestPlayerToCursor(x, y)
    Closest = nil
    local MaxDist, Closest = math.huge
    local Players = game.GetService(game, "Players")
    local LocalPlayer = Players.LocalPlayer
    for I,V in pairs(Players.GetPlayers(Players)) do
        if V == LocalPlayer then continue end
        if not V.Character then continue end
        local Head = V.Character.FindFirstChild(V.Character, targetPart)
        if not Head then continue end
        local humanoid = V.Character.FindFirstChild(V.Character, "Humanoid")
        if not humanoid then continue end
        if humanoid.Health <= 0 then continue end
        if team == nil or #team == 0 or isInTable(team, V.Name) == false then
            if visibleCheck == false or isInTable(getgenv().visiblePlayers, V.Name) == true then
        local Pos, Vis = currentCamera.WorldToScreenPoint(currentCamera, Head.Position)
        if not Vis then continue end
        local MousePos, TheirPos = Vector2.new(x, y), Vector2.new(Pos.X, Pos.Y)
        local Dist = (TheirPos - MousePos).Magnitude 
        if Dist < MaxDist and (Dist < Fov or Fov == 0) then
            MaxDist = Dist
            Closest = V
        end
    end
end
    end
    return Closest
end

local function createPlayerRay()
    local closestPlayer =
        getClosestPlayerToCursor(
        math.floor(currentCamera.ViewportSize.X / 1.9),
        math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown,
        0.1
    )
    if closestPlayer and wl then
        getgenv().targetPlayer = closestPlayer
        local pos = currentCamera.WorldToScreenPoint(currentCamera,closestPlayer.Character[targetPart].Position)
        local screenRay = currentCamera.ScreenPointToRay(currentCamera,pos.X, pos.Y, 0.1)
        local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 4000)
        return playerRay
    end
    getgenv().targetPlayer = nil
    return nil
end


local toggled = false
spawn(
    function()
        while wait() do
            if toggled == true then
                wait(1)
                local ended = false
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == tpPlayer or not nameEnabled then
                    if ended == false then
                        if v ~= game.Players.LocalPlayer then
                            if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") then
                                if v.Character.Humanoid.Health > 0 then
                                    if team == nil or #team == 0 or isInTable(team, v.Name) == false then
                                        local framepos = v.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -7)
                                        localPlayer.Character.HumanoidRootPart.Anchored = true
                                        currentCamera.CFrame = v.Character.HumanoidRootPart.CFrame
                                        game.Players.LocalPlayer.Character:MoveTo(
                                            Vector3.new(framepos.X, framepos.Y, framepos.Z)
                                        )
                                        
                                        localPlayer.Character.HumanoidRootPart.Anchored = false
                                        ended = true
                                    end
                                end
                            end
                        end
                        end
                    end
                end
                toggled = false
            end
        end
    end
)

local weaponData = require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]]
local function weaponMods()
if not getgenv().wepMods then
    Rayfield:Notify({
        Title = "Enable Gun Mods?",
        Content = "Are you sure you want to enable gun mods?",
        Duration = 6.5,
        Image = 4483362458,
        Actions = { -- Notification Buttons
           Ignore = {
              Name = "Yes!",
              Callback = function()
           end
        },
     },
     })
    getgenv().wepMods = true
local rifle = {
    ammoType = constants[10], 
    weaponType = constants[11], 
    spreadCooldown = 0.25, 
    ReloadTime = 1.75, 
    kickBackInc = 0.235, 
    kickBackCount = 2, 
    spreadMultiplier = 150, 
    spreadRate = 1, 
    maxSpread = 6, 
    Mode = "Auto", 
    FireRate = 5.75, 
    scopeType = "None", 
    bulletTravel = 2000, 
    distanceAccuracy = 700, 
    multiShot = false, 
    shotCount = 1, 
    maxAmmo = 30, 
    weaponDamage = 19, 
    projectile = false, 
    baseSpread = 1, 
    adsBoost = 1.275, 
    hasComplexShot = 3
}
for i, v in pairs(getgc(true)) do
    if type(v) == constants[8] then
        local rawCount = 0
        for a, x in pairs(rifle) do
            if rawget(v,a) then
                if tostring(rawget(v,a)) == tostring(x) then
                    rawCount = rawCount + 1
                end
            end
        end
        if rawCount >= 20 and i ~= require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]][constants[9]] then
            rawCount = 0
            continue
        end
        for a, x in pairs(getgenv().Options["modValues"]) do
            if rawget(v, a) then
                
                if isInTable(weaponData, v) == false then
                    rawset(v, a, x)
                end
            
            end
        end
    end
end
end
end
--// Autopot
coroutine.wrap(
    function()
        while wait() do
            if autopot then
                pcall(
                    function()
                        if localPlayer.Character then
                            for count = 1, 6 do
                                local remote = game.ReplicatedStorage.Remote_Functions.Use_Item
                                local shield = localPlayer.Character.Humanoid.Player_Shield.Value
                                local hp = localPlayer.Character.Humanoid.Player_Health.Value
                                local fuck = "Slot" .. tostring(count)
                                local slot = game.ReplicatedStorage.Player_Storages[localPlayer.Name][fuck]
                                local val = tostring(slot.Value)
                                local equipTool = localPlayer.Character:FindFirstChildOfClass("Tool")
                                if val == "Mini Potion" then
                                    if shield < 50 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                elseif val == "Shield Potion" then
                                    if shield < 75 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                elseif val == "Gulp Jar" then
                                    if shield < 26 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                elseif val == "Guzzle Jug" then
                                    if shield < 75 or health < 75 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                elseif val == "Health Kit" then
                                    if hp < 75 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                elseif val == "Bandage" then
                                    if hp < 75 then
                                        if equipTool.Name ~= val then
                                            for i, v in pairs(localPlayer.Backpack:GetChildren()) do
                                                if v.Name == val then
                                                    localPlayer.Character.Humanoid:EquipTool(v)
                                                end
                                            end
                                            remote:InvokeServer(slot)
                                        else
                                            remote:InvokeServer(slot)
                                        end
                                    end
                                end
                            end
                        end
                    end
                )
            end
        end
    end
)()

local Button = Section3:CreateButton({
    Name = "Weapon Mods",
    Callback = function()
        weaponMods()
    end,
 })

local espTick = tick()
-- // Player Esp
local function initalizeChams()
local chamsTable = {}
local playerConnection = game.Players.PlayerAdded:Connect(
    function(player)
        if player ~= localPlayer then
            local charConnection = player.CharacterAdded:Connect(
                function(character)
                    
                    wait()
                    local wait1 = character:WaitForChild("Head")
                    local wait2 = character:WaitForChild("HumanoidRootPart")
                    local wait3 = character:WaitForChild("Humanoid")
                    for i, v in pairs(character:GetChildren()) do
                        if v:IsA("Part") or v:IsA("MeshPart") then
                            if v.Name ~= "HumanoidRootPart" then
                                --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                                local box = Instance.new("BoxHandleAdornment")
                                box.Size = v.Size
                                box.ZIndex = 0
                                box.AlwaysOnTop = true
                                box.Transparency = EspTransparency
                                if isInTable(team, player.Name) == false then
                                    box.Color3 = Color3.fromRGB(255, 0, 0)
                                else
                                    box.Color3 = Color3.fromRGB(61, 176, 26)
                                end
                                box.Adornee = v
                                box.Parent = v
                            end
                        end
                    end
                end
            )
            table.insert(chamsConnections, charConnection)
            table.insert(chamsConnections, playerConnection)
        end
    end
)
for i, player in pairs(game.Players:GetPlayers()) do
    if player ~= localPlayer then
        
        local charConnection2 = player.CharacterAdded:Connect(
            function(character)
                wait()
                
                local wait1 = character:WaitForChild("Head")
                local wait2 = character:WaitForChild("HumanoidRootPart")
                local wait3 = character:WaitForChild("Humanoid")
                for i, v in pairs(character:GetChildren()) do
                    if v:IsA("Part") or v:IsA("MeshPart") then
                        if v.Name ~= "HumanoidRootPart" then
                            --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                            local box = Instance.new("BoxHandleAdornment")
                            box.Size = v.Size
                            box.ZIndex = 0
                            box.AlwaysOnTop = true
                            box.Transparency = EspTransparency
                            if isInTable(team, player.Name) == false then
                                box.Color3 = Color3.fromRGB(255, 0, 0)
                            else
                                box.Color3 = Color3.fromRGB(61, 176, 26)
                            end
                            box.Adornee = v
                            box.Parent = v
                        end
                    end
                end
            end
        )
        if player.Character then
            local character = player.Character
            local wait1 = character:WaitForChild("Head")
            local wait2 = character:WaitForChild("HumanoidRootPart")
            local wait3 = character:WaitForChild("Humanoid")
            wait()
            for i, v in pairs(character:GetChildren()) do
                if v:IsA("Part") or v:IsA("MeshPart") then
                    if v.Name ~= "HumanoidRootPart" then
                        --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                        local box = Instance.new("BoxHandleAdornment")
                        box.Size = v.Size
                        box.ZIndex = 0
                        box.AlwaysOnTop = true
                        box.Transparency = EspTransparency
                        if isInTable(team, player.Name) == false then
                            box.Color3 = Color3.fromRGB(255, 0, 0)
                        else
                            box.Color3 = Color3.fromRGB(61, 176, 26)
                        end
                        box.Adornee = v
                        box.Parent = v
                    end
                end
            end
        end
        table.insert(chamsConnections, charConnection2)
    end
end

end
if chams then
initalizeChams()
end
espLib.FaceCamera = espLock
espLib.Color = fromRGB(255, 0, 0)
espLib.Names = espNames
espLib.Tracers = espTracers
espLib.Boxes = espBoxes
espLib:Toggle(true)

local Toggle = Section2:CreateToggle({
    Name = "Chams",
    CurrentValue = false,
    Flag = "Chams", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            initalizeChams()
            else
                for i,v in pairs(chamsConnections) do
                    v:Disconnect()
                end
                chamsConnections = {}
                for i,v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v ~= localPlayer and v.Character then
                        for i, v in pairs(v.Character:GetChildren()) do
                            if v:IsA("Part") or v:IsA("MeshPart") then
                                if v.Name ~= "HumanoidRootPart" then
                                    local box = v:FindFirstChildOfClass("BoxHandleAdornment")
                                    if box then
                                        box:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
    end,
 })

local hookTick = tick()
local OldIndex = nil
local OldNameCall = nil

OldNameCall = hookmetamethod(game, "__namecall", function(...)
        local method = getnamecallmethod()
        local args = {...}
        if not checkcaller() and args[1] == game and tostring(method) == "GetService" and args[2] == "LogService" then
            return {GetLogHistory = function()
                end}
        end
        if isInTable({"Airdrop_Watch", "Track", "Spectate_Notify", "Down_Ally", "Falling_Toggle", "Handle_Window", "Stop_Animation", "Force_Flop"}, tostring(args[1])) and tostring(method) == "FireServer" then
           return 
        end
	if not checkcaller() and tostring(method) == "GetTotalMemoryUsageMb" then
        	return GenerateFakeMemory();
    	end
        if tostring(args[1]) == "Enable_Particle" and args[2] == 1337 then
        end
        if not checkcaller() and tostring(method) == constants[14] then 
            return Enum.HumanoidStateType.None
        end 
        if tostring(args[1]) == constants[5] and tostring(method) == "FireServer" then 
            if tostring(args[5]) == "Blunderblast" or tostring(args[5]) == "Flintlock" then
                if tpExploit then
                    if toggled == false then 
                        toggled = true
                    end
                end
                
            end
        
            if weaponData[tostring(args[5])] then
                for i, v in pairs(args) do
                    if type(v) == "table" and v[constants[13]] then 
                        args[i] = weaponData[tostring(args[5])]
                    end
                end
                return OldNameCall(unpack(args))
            else
                return
            end
            
        end
        if tostring(args[1]) == "Request_Bounce" and method == "InvokeServer" then
            if tpExploit then    
                if toggled == false then
                    toggled = true
                end
            end
        end
        if tostring(args[1]) == "Falling_State" and method == "FireServer" then
            if noFall then
                args[2] = 2
                return OldNameCall(unpack(args))
            end
        end
        if not checkcaller() and tostring(method) == "FindPartOnRayWithIgnoreList" then
                if silentAim == true then
                    local scrip = getcallingscript()
                    if getscripthash(scrip) == "a04c08b6768435c6f66e5c388d9d2d2cb5fb8a8523ba04b02f3ac2099ad9e66d432df55c494f360d2131ad9cc9bd8bcf" then --Da new anticheat bypass????
                            if randomNum <= hitChance then
                                local ray = createPlayerRay()
                                if ray then
                                args[2] = ray
                                return OldNameCall(unpack(args))
                                end
                            end
                    end
            end 
        end

        return OldNameCall(...)
    end
)
OldIndex = hookmetamethod(game, "__index", function(tbl,idx)
    if tostring(idx) == "Size" and tostring(tbl) == "HumanoidRootPart" then
        return Vector3.new(1.94494772, 1.02207005, 0.97247386)
    end
    if tostring(tbl) == "Humanoid" and tostring(idx) == "JumpPower" then
        return 58
    end
    if tostring(tbl) == "Humanoid" and wl and tostring(idx) == "WalkSpeed" then
        return 25
    end
    return OldIndex(tbl,idx)
end)

local OldFunction
local Hook = function(self, ...)
    if self == game:GetService("ReplicatedStorage")["Remote_Events"]["Update_JointsX"] then
        if antiAim then
            local args = {...}
            args[1] = getgenv().Options["C1"]
            args[2] = getgenv().Options["C2"]
            return OldFunction(self, unpack(args))
        end
    end
    if self == game:GetService("ReplicatedStorage")["Remote_Events"]["Falling_State"]then 
        if noFall then
        local args = {...}
        args[1] = 2
        return OldFunction(self, unpack(args))
        end
    end
    return OldFunction(self, ...)
end
OldFunction = hookfunction(Instance.new("RemoteEvent").FireServer, Hook)
local GetTotalMemoryUsageMb;
GetTotalMemoryUsageMb = hookfunction(game:GetService("Stats").GetTotalMemoryUsageMb, function(Stats)
    return GenerateFakeMemory();
end)
-- //
local misc = tick()
-- // Drawing

circle.Visible = circlevis
circle.Transparency = 1
circle.Color = Color3.fromRGB(0,0,0)
circle.Thickness = 1
circle.Radius = 100
circle.Filled = false
circle.NumSides = 100
local shiftKeyL = Enum.KeyCode.LeftAlt
local shiftKeyR = Enum.KeyCode.RightAlt
local function Input(input, gameProcessedEvent)
    local value = input.KeyCode
end

UserInputService.InputBegan:Connect(Input)

local function IsKeyDown()
    local buttons = UserInputService:GetMouseButtonsPressed()
    for _, button in pairs(buttons) do
        if tostring(aimlockKeybind) == button.UserInputType.Name then
           return true 
        end
    end
    if tostring(aimlockKeybind) == "MouseButton1" or tostring(aimlockKeybind) == "MouseButton2" or tostring(aimlockKeybind) == "MouseButton3" then
        return false
    else
        return UserInputService:IsKeyDown(aimlockKeybind)
    end
end
local function IsKeyDownNoclip()
    local buttons = UserInputService:GetMouseButtonsPressed()
    local Noclip = getgenv().Options["Noclip"] or Enum.KeyCode.X
    for _, button in pairs(buttons) do
       if tostring(Noclip) == button.UserInputType.Name then
           return true 
        end
    end
    if Noclip == "MouseButton1" or Noclip == "MouseButton2" or Noclip == "MouseButton3" then
        return false
    else
        return UserInputService:IsKeyDown(getgenv().Options["Noclip"])
    end
end
UserInputService.InputBegan:Connect(function(inputObject, gameProcessedEvent)
    if silentAimToggle then
    if inputObject.KeyCode == saKey then
        silentAim = not silentAim
    end 
end
end)
--// Gun ignores
cGunIgnores = {workspace.Debris, workspace.Map, workspace.Lobby, workspace:FindFirstChild("Loot_Spawns")}
coroutine.wrap(function()
    while wait(1) do
        if visibleCheck then
            cGunIgnores = {workspace.Debris, workspace.Map, workspace.Lobby, workspace:FindFirstChild("Loot_Spawns")}
        end
    end
end)()
--//
local alternate = 0
runService.RenderStepped:Connect(
    function()
        if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
            if walkEnabled then
            localPlayer.Character.Humanoid.WalkSpeed = walk
            end
            if jumpEnabled then
                localPlayer.Character.Humanoid.JumpPower = jump
            end
        end
        
        for i, v in next, tracking do
            v:update()
        end

        if silentAim or aimlock then
            if (Hchance + Uchance + Lchance) > 0 then
                if randomNum2 <= Hchance then
                    targetPart = "Head"
                elseif randomNum2 <= (Hchance + Uchance) then
                    targetPart = "UpperTorso"
                elseif randomNum2 <= (Hchance + Uchance + Lchance) then
                    targetPart = "LowerTorso"
                end
                
            end
        end
        if visibleCheck then
        alternate = alternate + 1
        if alternate >= 2 and wl then
            alternate = 0

            if autowall then
                local closestPlayer =
                    getClosestPlayerToCursor(
                    math.floor(currentCamera.ViewportSize.X / 1.9),
                    math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown,
                    0.1
                    )
                    getgenv().targetPlayer = closestPlayer
                    if getgenv().targetPlayer then
                        mouse1click()
                    end
            end

            for i, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player ~= localPlayer and player.Character then
                    local visChar = player.Character
                    local targetVis = targetPart
                    if
                        visChar:FindFirstChild(targetVis) 
                     then
                        local pos = currentCamera:WorldToScreenPoint(visChar[targetVis].Position)
                        local screenRay = currentCamera:ScreenPointToRay(pos.X, pos.Y, 0.1)
                        local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 5000)
                        local hitPart = workspace:FindPartOnRayWithIgnoreList(playerRay, cGunIgnores)
                        if hitPart and hitPart:IsDescendantOf(visChar) then
                            if isInTable(getgenv().visiblePlayers, player.Name) == false then
                                table.insert(getgenv().visiblePlayers, player.Name)
                            end
                            for i, v in pairs(visChar:GetChildren()) do
                                if v:IsA("Part") or v:IsA("MeshPart") then
                                    if v.Name ~= "HumanoidRootPart" and v:FindFirstChildOfClass("BoxHandleAdornment") then
                                        v:FindFirstChildOfClass("BoxHandleAdornment").Transparency = 0.8
                                    end
                                end
                            end
                        else
                            if isInTable(getgenv().visiblePlayers, player.Name) == true then
                                local finder = table.find(getgenv().visiblePlayers, player.Name)
                                if finder then
                                    table.remove(getgenv().visiblePlayers, finder)
                                end
                            end
                            for i, v in pairs(visChar:GetChildren()) do
                                if v:IsA("Part") or v:IsA("MeshPart") then
                                    if v.Name ~= "HumanoidRootPart" and v:FindFirstChildOfClass("BoxHandleAdornment") then
                                        v:FindFirstChildOfClass("BoxHandleAdornment").Transparency =
                                            tonumber(EspTransparency)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        end

        if noclipLoop and IsKeyDownNoclip() then
            if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
            end
        end
        randomNum = random:NextInteger(1, 100)
        randomNum2 = random:NextInteger(1, 100)
        circle.Radius = Fov
        circle.Position =
            Vector2.new(
            math.floor(currentCamera.ViewportSize.X / 1.9),
            math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
        )
        if Fov == 0 then
            circle.Visible = false
        else
            if circlevis then
            circle.Visible = true
            end
        end
        if aimlock == true then
            if IsKeyDown() == true then
                local closePlayer =
                    getClosestPlayerToCursor(
                    math.floor(currentCamera.ViewportSize.X / 1.9),
                    math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
                )
                if closePlayer then
                    getgenv().targetPlayerAimlock = closePlayer
                    local mouseMoveValue =
                        Vector2.new(
                        math.floor(currentCamera.ViewportSize.X / 1.9),
                        math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
                    ) -
                        Vector2.new(
                            currentCamera:WorldToViewportPoint(closePlayer.Character[targetPart].Position).X,
                            currentCamera:WorldToViewportPoint(closePlayer.Character[targetPart].Position).Y
                        )
                    mousemoverel(
                        (mouseMoveValue.X / smoothness) * -1,
                        (mouseMoveValue.Y / smoothness) * -1
                    )
                else
                    getgenv().targetPlayerAimlock = nil
                end
            else
                getgenv().targetPlayerAimlock = nil
            end
        else
            getgenv().targetPlayerAimlock = nil
        end
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and wl then
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Setup") then
                gunName = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
                if circlevis then 
                circle.Visible = true
                end
                if silentAim == true then
                else
                    getgenv().targetPlayer = nil
                end
            else
                getgenv().targetPlayer = nil
                circle.Visible = false
            end
        else
            getgenv().targetPlayer = nil
            circle.Visible = false
        end
        for p, o in pairs(game.Players:GetPlayers()) do
            if o.Character then
                if o.Character:FindFirstChild("Humanoid") and o.Character:FindFirstChild("Humanoid").Health <= 0 then
                    for i, v in next, tracking do
                        if v.char == o.Character then
                            v:remove()
                            remove(tracking, i)
                        end
                    end
                end
            end
        end
    end
)